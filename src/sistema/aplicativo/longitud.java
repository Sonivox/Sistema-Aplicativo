package sistema.aplicativo;

import java.awt.Image;
import static java.lang.Double.parseDouble;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
public class longitud extends javax.swing.JFrame {

    /**
     * Creates new form longitud
     */
    public longitud() {
        initComponents();
        this.setLocationRelativeTo(null);
        Image icon = new ImageIcon(getClass().getResource("/imagenes/icono.png")).getImage();
        setIconImage(icon);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        unidadTXT = new javax.swing.JTextField();
        resultadoTXT = new javax.swing.JTextField();
        iniciarBTN = new javax.swing.JButton();
        segundaCB = new javax.swing.JComboBox<>();
        primeraCB = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        regresar1 = new javax.swing.JButton();
        factoresBTN = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(0, 128, 128));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(unidadTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, 190, 40));

        resultadoTXT.setEditable(false);
        jPanel1.add(resultadoTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 90, 190, 40));

        iniciarBTN.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        iniciarBTN.setText("CONVERTIR");
        iniciarBTN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        iniciarBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        iniciarBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarBTNActionPerformed(evt);
            }
        });
        jPanel1.add(iniciarBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 200, 140, 40));

        segundaCB.setFont(new java.awt.Font("Cambria Math", 1, 14)); // NOI18N
        segundaCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CENTIMETROS", "KILOMETROS", "METROS", "MILIMETROS", "MILLAS", "MILLA NAUTICA", "PIES", "PULGADA", "YARDA" }));
        jPanel1.add(segundaCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 150, 190, 37));

        primeraCB.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        primeraCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CENTIMETROS", "KILOMETROS", "METROS", "MILIMETROS", "MILLAS", "MILLA NAUTICA", "PIES", "PULGADA", "YARDA" }));
        jPanel1.add(primeraCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 150, 190, 37));

        jLabel3.setFont(new java.awt.Font("Cambria Math", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("=");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 90, -1, -1));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("SELECIONE LAS UNIDADES QUE DESEA CONVERTIR");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, -1, -1));

        regresar1.setBackground(new java.awt.Color(255, 255, 255));
        regresar1.setFont(new java.awt.Font("Cambria Math", 1, 14)); // NOI18N
        regresar1.setText("MENU");
        regresar1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black));
        regresar1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        regresar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regresar1ActionPerformed(evt);
            }
        });
        jPanel1.add(regresar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(443, 0, 100, 45));

        factoresBTN.setFont(new java.awt.Font("Cambria Math", 2, 14)); // NOI18N
        factoresBTN.setText("factores de conversion");
        factoresBTN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        factoresBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                factoresBTNActionPerformed(evt);
            }
        });
        jPanel1.add(factoresBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 180, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void iniciarBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarBTNActionPerformed
        //PARA LAS OPCIONES
        try{
        String opcion = primeraCB.getSelectedItem().toString();
        String opcion2 = segundaCB.getSelectedItem().toString();
        
        //PARA LOS CALCULOS
        double unidad = parseDouble(unidadTXT.getText());
        double resultado = 0;
        
        if(opcion == null ? opcion2 == null : opcion.equals(opcion2)){
            resultadoTXT.setText(unidadTXT.getText());
        }
        
        //Centimetro
        if("CENTIMETROS".equals(opcion) && "KILOMETROS".equals(opcion2)){
            resultado = parseDouble(principal.f.CentiKilome(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("CENTIMETROS".equals(opcion) && "METROS".equals(opcion2)){
            resultado = parseDouble(principal.f.CentiMetro(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("CENTIMETROS".equals(opcion) && "MILIMETROS".equals(opcion2)){
            resultado = parseDouble(principal.f.CentiMili(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("CENTIMETROS".equals(opcion) && "MILLAS".equals(opcion2)){
            resultado = parseDouble(principal.f.CentiMilla(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("CENTIMETROS".equals(opcion) && "MILLA NAUTICA".equals(opcion2)){
            resultado = parseDouble(principal.f.CentiMillanautica(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("CENTIMETROS".equals(opcion) && "PIES".equals(opcion2)){
            resultado = parseDouble(principal.f.CentiPies(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("CENTIMETROS".equals(opcion) && "PULGADA".equals(opcion2)){
            resultado = parseDouble(principal.f.CentiPulgada(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("CENTIMETROS".equals(opcion) && "YARDA".equals(opcion2)){
            resultado = parseDouble(principal.f.CentiYarda(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        
        //Kilometros
        if("KILOMETROS".equals(opcion) && "CENTIMETROS".equals(opcion2)){
            resultado = parseDouble(principal.f.KilomeCenti(unidad).replaceAll("E", "*10^"));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("KILOMETROS".equals(opcion) && "METROS".equals(opcion2)){
            resultado = parseDouble(principal.f.KilomeMetro(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("KILOMETROS".equals(opcion) && "MILIMETROS".equals(opcion2)){
            resultado = parseDouble(principal.f.KilomeMili(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("KILOMETROS".equals(opcion) && "MILLAS".equals(opcion2)){
            resultado = parseDouble(principal.f.KilomeMilla(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("KILOMETROS".equals(opcion) && "MILLA NAUTICA".equals(opcion2)){
            resultado = parseDouble(principal.f.KilomeMillanautica(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("KILOMETROS".equals(opcion) && "PIES".equals(opcion2)){
            resultado = parseDouble(principal.f.KilomePies(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("KILOMETROS".equals(opcion) && "PULGADA".equals(opcion2)){
            resultado = parseDouble(principal.f.KilomePulgada(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("KILOMETROS".equals(opcion) && "YARDA".equals(opcion2)){
            resultado = parseDouble(principal.f.KilomeYarda(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        
        //Metro
        if("METROS".equals(opcion) && "CENTIMETROS".equals(opcion2)){
            resultado = parseDouble(principal.f.MetroCenti(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("METROS".equals(opcion) && "KILOMETROS".equals(opcion2)){
            resultado = parseDouble(principal.f.MetroKilome(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("METROS".equals(opcion) && "MILIMETROS".equals(opcion2)){
            resultado = parseDouble(principal.f.MetroMili(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("METROS".equals(opcion) && "MILLAS".equals(opcion2)){
            resultado = parseDouble(principal.f.MetroMilla(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("METROS".equals(opcion) && "MILLA NAUTICA".equals(opcion2)){
            resultado = parseDouble(principal.f.MetroMillanautica(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("METROS".equals(opcion) && "PIES".equals(opcion2)){
            resultado = parseDouble(principal.f.MetroPies(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("METROS".equals(opcion) && "PULGADA".equals(opcion2)){
            resultado = parseDouble(principal.f.MetroPulgada(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("METROS".equals(opcion) && "YARDA".equals(opcion2)){
            resultado = parseDouble(principal.f.MetroYarda(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        
        //MILIMETRO
        if("MILIMETROS".equals(opcion) && "CENTIMETROS".equals(opcion2)){
            resultado = parseDouble(principal.f.MiliCenti(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILIMETROS".equals(opcion) && "KILOMETROS".equals(opcion2)){
            resultado = parseDouble(principal.f.MiliKilome(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILIMETROS".equals(opcion) && "METROS".equals(opcion2)){
            resultado = parseDouble(principal.f.MiliMetro(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILIMETROS".equals(opcion) && "MILLAS".equals(opcion2)){
            resultado = parseDouble(principal.f.MiliMilla(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILIMETROS".equals(opcion) && "MILLA NAUTICA".equals(opcion2)){
            resultado = parseDouble(principal.f.MiliMillanautica(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILIMETROS".equals(opcion) && "PIES".equals(opcion2)){
            resultado = parseDouble(principal.f.MiliPies(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILIMETROS".equals(opcion) && "PULGADA".equals(opcion2)){
            resultado = parseDouble(principal.f.MiliPulgada(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILIMETROS".equals(opcion) && "YARDA".equals(opcion2)){
            resultado = parseDouble(principal.f.MiliYarda(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        
        //Milla
        if("MILLAS".equals(opcion) && "CENTIMETROS".equals(opcion2)){
            resultado = parseDouble(principal.f.MillaCenti(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILLAS".equals(opcion) && "KILOMETROS".equals(opcion2)){
            resultado = parseDouble(principal.f.MillaKilome(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILLAS".equals(opcion) && "METROS".equals(opcion2)){
            resultado = parseDouble(principal.f.MillaMetro(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILLAS".equals(opcion) && "MILIMETROS".equals(opcion2)){
            resultado = parseDouble(principal.f.MillaMili(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILLAS".equals(opcion) && "MILLA NAUTICA".equals(opcion2)){
            resultado = parseDouble(principal.f.MillaMillanautica(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILLAS".equals(opcion) && "PIES".equals(opcion2)){
            resultado = parseDouble(principal.f.MillaPies(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILLAS".equals(opcion) && "PULGADA".equals(opcion2)){
            resultado = parseDouble(principal.f.MillaPulgada(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILLAS".equals(opcion) && "YARDA".equals(opcion2)){
            resultado = parseDouble(principal.f.MillaYarda(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        
        //Milla nautica
        if("MILLA NAUTICA".equals(opcion) && "CENTIMETROS".equals(opcion2)){
            resultado = parseDouble(principal.f.MillanauticaCenti(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILLA NAUTICA".equals(opcion) && "KILOMETROS".equals(opcion2)){
            resultado = parseDouble(principal.f.MillanauticaKilome(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILLA NAUTICA".equals(opcion) && "METROS".equals(opcion2)){
            resultado = parseDouble(principal.f.MillanauticaMetro(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILLA NAUTICA".equals(opcion) && "MILIMETROS".equals(opcion2)){
            resultado = parseDouble(principal.f.MillanauticaMili(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILLA NAUTICA".equals(opcion) && "MILLAS".equals(opcion2)){
            resultado = parseDouble(principal.f.MillanauticaMilla(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILLA NAUTICA".equals(opcion) && "PIES".equals(opcion2)){
            resultado = parseDouble(principal.f.MillanauticaPie(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILLA NAUTICA".equals(opcion) && "PULGADA".equals(opcion2)){
            resultado = parseDouble(principal.f.MillanauticaPulgada(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILLA NAUTCIA".equals(opcion) && "YARDA".equals(opcion2)){
            resultado = parseDouble(principal.f.MillanauticaYarda(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        
        //Pulgada
        if("PIES".equals(opcion) && "CENTIMETROS".equals(opcion2)){
            resultado = parseDouble(principal.f.PiesCenti(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("PIES".equals(opcion) && "KILOMETROS".equals(opcion2)){
            resultado = parseDouble(principal.f.PiesKilome(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("PIES".equals(opcion) && "METROS".equals(opcion2)){
            resultado = parseDouble(principal.f.PiesMetro(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("PIES".equals(opcion) && "MILIMETROS".equals(opcion2)){
            resultado = parseDouble(principal.f.PiesMili(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("PIES".equals(opcion) && "MILLAS".equals(opcion2)){
            resultado = parseDouble(principal.f.PiesMilla(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("PIES".equals(opcion) && "MILLA NAUTICA".equals(opcion2)){
            resultado = parseDouble(principal.f.PiesMillanautica(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("PIES".equals(opcion) && "PULGADA".equals(opcion2)){
            resultado = parseDouble(principal.f.PiesPulgada(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("PIES".equals(opcion) && "YARDA".equals(opcion2)){
            resultado = parseDouble(principal.f.PiesYarda(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        
        //Pulgada
        if("PULGADA".equals(opcion) && "CENTIMETROS".equals(opcion2)){
            resultado = parseDouble(principal.f.PulgadaCenti(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("PULGADA".equals(opcion) && "KILOMETROS".equals(opcion2)){
            resultado = parseDouble(principal.f.PulgadaKilome(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("PULGADA".equals(opcion) && "METROS".equals(opcion2)){
            resultado = parseDouble(principal.f.PulgadaMetro(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("PULGADA".equals(opcion) && "MILIMETROS".equals(opcion2)){
            resultado = parseDouble(principal.f.PulgadaMili(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("PULGADA".equals(opcion) && "MILLAS".equals(opcion2)){
            resultado = parseDouble(principal.f.PulgadaMilla(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("PULGADA".equals(opcion) && "MILLA NAUTICA".equals(opcion2)){
            resultado = parseDouble(principal.f.PulgadaMillanautica(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("PULGADA".equals(opcion) && "PIES".equals(opcion2)){
            resultado = parseDouble(principal.f.PulgadaPie(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("PULGADA".equals(opcion) && "YARDA".equals(opcion2)){
            resultado = parseDouble(principal.f.PulgadaYarda(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        
        //Yarda
        if("YARDA".equals(opcion) && "CENTIMETROS".equals(opcion2)){
            resultado = parseDouble(principal.f.YardaCenti(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("YARDA".equals(opcion) && "KILOMETROS".equals(opcion2)){
            resultado = parseDouble(principal.f.YardaKilome(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("YARDA".equals(opcion) && "METROS".equals(opcion2)){
            resultado = parseDouble(principal.f.YardaMetro(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("YARDA".equals(opcion) && "MILIMETROS".equals(opcion2)){
            resultado = parseDouble(principal.f.YardaMili(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("YARDA".equals(opcion) && "MILLAS".equals(opcion2)){
            resultado = parseDouble(principal.f.YardaMilla(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("YARDA".equals(opcion) && "MILLA NAUTICA".equals(opcion2)){
            resultado = parseDouble(principal.f.YardaMillanautica(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("YARDA".equals(opcion) && "PIE".equals(opcion2)){
            resultado = parseDouble(principal.f.YardaPies(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("YARDA".equals(opcion) && "PULGADA".equals(opcion2)){
            resultado = parseDouble(principal.f.YardaPulgada(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null," NO INGRESE LETRAS \n NO DEJE CAMPOS VACIOS","ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_iniciarBTNActionPerformed

    private void regresar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regresar1ActionPerformed
      
        this.dispose();
    }//GEN-LAST:event_regresar1ActionPerformed

    private void factoresBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_factoresBTNActionPerformed
        JOptionPane.showMessageDialog(null, "1 mm = 0.1 cm \n"
                + " 1 m = 100 cm \n 1 km = 1000 m \n"
                + " 1 km = 0.621371 milla \n 1 milla  = 0.868976 milla nautica \n"
                + " 1 pie = 0.3048 m \n 1 pulgada = 0.0254 m \n"
                + " 1 yarda = 0.9144 m", "FACTORES", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_factoresBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(longitud.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(longitud.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(longitud.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(longitud.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new longitud().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton factoresBTN;
    private javax.swing.JButton iniciarBTN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox<String> primeraCB;
    private javax.swing.JButton regresar1;
    private javax.swing.JTextField resultadoTXT;
    private javax.swing.JComboBox<String> segundaCB;
    private javax.swing.JTextField unidadTXT;
    // End of variables declaration//GEN-END:variables
}

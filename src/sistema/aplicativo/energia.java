package sistema.aplicativo;

import java.awt.Image;
import static java.lang.Double.parseDouble;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
public class energia extends javax.swing.JFrame {
    /**
     * Creates new form energia
     */
    public energia() {
        initComponents();
        this.setLocationRelativeTo(null);
        Image icon = new ImageIcon(getClass().getResource("/imagenes/icono.png")).getImage();
        setIconImage(icon);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        unidadTXT = new javax.swing.JTextField();
        resultadoTXT = new javax.swing.JTextField();
        segundaCB = new javax.swing.JComboBox<>();
        primeraCB = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        regresar = new javax.swing.JButton();
        iniciarBTN = new javax.swing.JButton();
        factoresBTN = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(0, 128, 128));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(unidadTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, 190, 40));

        resultadoTXT.setEditable(false);
        jPanel1.add(resultadoTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 90, 190, 40));

        segundaCB.setFont(new java.awt.Font("Cambria Math", 1, 14)); // NOI18N
        segundaCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "VATIOS HORA", "KILOVATIOS HORA", "JULIOS", "KILOCALORIAS", "KILOJOULES", "PIE-LIBRA-FUERZA" }));
        jPanel1.add(segundaCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 150, 190, 37));

        primeraCB.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        primeraCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "VATIOS HORA", "KILOVATIOS HORA", "JULIOS", "KILOCALORIAS", "KILOJOULES", "PIE-LIBRA-FUERZA" }));
        jPanel1.add(primeraCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 150, 189, 37));

        jLabel3.setFont(new java.awt.Font("Cambria Math", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText(" =");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 90, -1, -1));

        jLabel1.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("SELECIONE LAS UNIDADES QUE DESEA CONVERTIR");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, -1, -1));

        regresar.setBackground(new java.awt.Color(255, 255, 255));
        regresar.setFont(new java.awt.Font("Cambria Math", 1, 14)); // NOI18N
        regresar.setText("MENU");
        regresar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        regresar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regresarActionPerformed(evt);
            }
        });
        jPanel1.add(regresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(451, 0, 100, 45));

        iniciarBTN.setBackground(new java.awt.Color(255, 255, 255));
        iniciarBTN.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        iniciarBTN.setText("CONVERTIR");
        iniciarBTN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        iniciarBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        iniciarBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarBTNActionPerformed(evt);
            }
        });
        jPanel1.add(iniciarBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 200, 140, 40));

        factoresBTN.setFont(new java.awt.Font("Cambria Math", 2, 14)); // NOI18N
        factoresBTN.setText("factores de conversion");
        factoresBTN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        factoresBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                factoresBTNActionPerformed(evt);
            }
        });
        jPanel1.add(factoresBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 180, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void regresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regresarActionPerformed
        this.dispose();
    }//GEN-LAST:event_regresarActionPerformed

    private void iniciarBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarBTNActionPerformed
        try{
        //PARA LAS OPCIONES
        String opcion = primeraCB.getSelectedItem().toString();
        String opcion2 = segundaCB.getSelectedItem().toString();

        //PARA LOS CALCULOS
        double unidad = parseDouble(unidadTXT.getText());
        double resultado = 0;

        if(opcion == null ? opcion2 == null : opcion.equals(opcion2)){
            resultadoTXT.setText(unidadTXT.getText());
        }

        //PARA VATIOS HORA
        if("VATIOS HORA".equals(opcion) && "KILOVATIOS HORA".equals(opcion2)){
            resultado = parseDouble(principal.f.vatio_hKilovartios_h(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("VATIOS HORA".equals(opcion) && "JULIOS".equals(opcion2)){
            resultado = parseDouble(principal.f.vatio_hJulio(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("VATIOS HORA".equals(opcion) && "KILOCALORIAS".equals(opcion2)){
            resultado = parseDouble(principal.f.vatio_hKiolocalo(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("VATIOS HORA".equals(opcion) && "KILOJOULES".equals(opcion2)){
            resultado = parseDouble(principal.f.vatio_hKiJoule(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("VATIOS HORA".equals(opcion) && "PIE-LIBRA-FUERZA".equals(opcion2)){
            resultado = parseDouble(principal.f.centiPul(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }

        //PARA KILOVATIOS HORA
        if("KILOVATIOS HORA".equals(opcion) && "VATIOS HORA".equals(opcion2)){
            resultado = parseDouble(principal.f.Kilovatio_hvatio_h(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("KILOVATIOS HORA".equals(opcion) && "JULIOS".equals(opcion2)){
            resultado = parseDouble(principal.f.Kilovatio_hJulio(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("KILOVATIOS HORA".equals(opcion) && "KILOCALORIAS".equals(opcion2)){
            resultado = parseDouble(principal.f.Kilovatio_hKilocalo(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("KILOVATIOS HORA".equals(opcion) && "KILOJOULES".equals(opcion2)){
            resultado = parseDouble(principal.f.Kilovatio_hKiloJoule(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("KILOVATIOS HORA".equals(opcion) && "PIE-LIBRA-FUERZA".equals(opcion2)){
            resultado = parseDouble(principal.f.Kilovatio_hPielibra_fuerza(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }

        //PARA LOS JULIOS
        if("JULIOS".equals(opcion) && "VATIOS HORA".equals(opcion2)){
            resultado = parseDouble(principal.f.JulioVatio_h(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("JULIOS".equals(opcion) && "KILOVATIOS HORA".equals(opcion2)){
            resultado = parseDouble(principal.f.JulioKilovatio_h(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("JULIOS".equals(opcion) && "KILOCALORIAS".equals(opcion2)){
            resultado = parseDouble(principal.f.JulioKilocalo(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("JULIOS".equals(opcion) && "KILOJOULES".equals(opcion2)){
            resultado = parseDouble(principal.f.JulioKiJoule(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("JULIOS".equals(opcion) && "PIE-LIBRA-FUERZA".equals(opcion2)){
            resultado = parseDouble(principal.f.JulioPielibra_fuerza(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }

        //PARA LAS KILOCALORIAS
        if("KILOCALORIAS".equals(opcion) && "JULIOS".equals(opcion2)){
            resultado = parseDouble(principal.f.KiloCaloJulio(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("KILOCALORIAS".equals(opcion) && "VATIOS HORA".equals(opcion2)){
            resultado = parseDouble(principal.f.KiloCalovatio_h(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("KILOCALORIAS".equals(opcion) && "KILOVATIOS HORA".equals(opcion2)){
            resultado = parseDouble(principal.f.KiloCaloKilovatio_h(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("KILOCALORIAS".equals(opcion) && "KILOJOULES".equals(opcion2)){
            resultado = parseDouble(principal.f.KiloCaloKiloJoule(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("KILOCALORIAS".equals(opcion) && "PIE-LIBRA-FUERZA".equals(opcion2)){
            resultado = parseDouble(principal.f.KiloCaloPielibra_fuerza(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }

        //PARA KILOJOULES
        if("KILOJOULES".equals(opcion) && "JULIOS".equals(opcion2)){
            resultado = parseDouble(principal.f.KiJouleJulio(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("KILOJOULES".equals(opcion) && "VATIOS HORA".equals(opcion2)){
            resultado = parseDouble(principal.f.KiJouleVatio_h(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("KILOJOULES".equals(opcion) && "KILOVATIOS HORA".equals(opcion2)){
            resultado = parseDouble(principal.f.KiJouleKilovatios_h(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("KILOJOULES".equals(opcion) && "KILOCALORIAS".equals(opcion2)){
            resultado = parseDouble(principal.f.KiJouleKilocalo(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("KILOJOULES".equals(opcion) && "PIE-LIBRA-FUERZA".equals(opcion2)){
            resultado = parseDouble(principal.f.KiJoulePielibra_fuerza(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }

        //PARA LOS PIE-LIBRA-FUERZA
        if("PIE-LIBRA-FUERZA".equals(opcion) && "JULIOS".equals(opcion2)){
            resultado = parseDouble(principal.f.Pielibra_fuerzaJulio(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("PIE-LIBRA-FUERZA".equals(opcion) && "VATIOS HORA".equals(opcion2)){
            resultado = parseDouble(principal.f.Pielibra_fuerzavatio_h(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("PIE-LIBRA-FUERZA".equals(opcion) && "KILOVATIOS HORA".equals(opcion2)){
            resultado = parseDouble(principal.f.Pielibra_fuerzaKilovatios_h(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("PIE-LIBRA-FUERZA".equals(opcion) && "KILOCALORIAS".equals(opcion2)){
            resultado = parseDouble(principal.f.Pielibra_fuerzaKiloCalo(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("PIE-LIBRA-FUERZA".equals(opcion) && "KILOJOULES".equals(opcion2)){
            resultado = parseDouble(principal.f.Pielibra_fuerzaKiloJoule(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null," NO INGRESE LETRAS \n NO DEJE CAMPOS VACIOS","ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_iniciarBTNActionPerformed

    private void factoresBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_factoresBTNActionPerformed
        JOptionPane.showMessageDialog(null, "1 Kilovatio hora = 1000 vatio hora \n 1 vatio hora = 3600 julio "
                + "\n 1 julio = 0.000239006 Kilocaloria \n 1 Kilocaloria = 4.184 Kilojoule"
                + "\n 1 Kilojoule = 737.562 Pies libras fuerza", "FACTORES", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_factoresBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(energia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(energia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(energia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(energia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new energia().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton factoresBTN;
    private javax.swing.JButton iniciarBTN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox<String> primeraCB;
    private javax.swing.JButton regresar;
    private javax.swing.JTextField resultadoTXT;
    private javax.swing.JComboBox<String> segundaCB;
    private javax.swing.JTextField unidadTXT;
    // End of variables declaration//GEN-END:variables
}

package sistema.aplicativo;

import static java.lang.Double.parseDouble;
import javax.swing.JOptionPane;
public class masa extends javax.swing.JFrame {
    /**
     * Creates new form masa
     */
    public masa() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        unidadTXT = new javax.swing.JTextField();
        resultadoTXT = new javax.swing.JTextField();
        iniciarBTN = new javax.swing.JButton();
        segundaCB = new javax.swing.JComboBox<>();
        primeraCB = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        regresar1 = new javax.swing.JButton();
        factoresBTN2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(0, 128, 128));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(unidadTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, 190, 40));

        resultadoTXT.setEditable(false);
        jPanel1.add(resultadoTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 90, 190, 40));

        iniciarBTN.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        iniciarBTN.setText("Convertir");
        iniciarBTN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        iniciarBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        iniciarBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarBTNActionPerformed(evt);
            }
        });
        jPanel1.add(iniciarBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 200, 149, 40));

        segundaCB.setFont(new java.awt.Font("Cambria Math", 1, 14)); // NOI18N
        segundaCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "GRAMOS", "KILOGRAMOS", "LIBRAS", "MILIGRAMOS", "ONZAS", "STONE", "TONELADAS" }));
        jPanel1.add(segundaCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 150, 190, 40));

        primeraCB.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        primeraCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "GRAMOS", "KILOGRAMOS", "LIBRAS", "MILIGRAMOS", "ONZAS", "STONE", "TONELADAS" }));
        jPanel1.add(primeraCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 150, 190, 40));

        jLabel3.setFont(new java.awt.Font("Cambria Math", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("=");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 90, -1, -1));

        jLabel1.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("SELECIONE LAS UNIDADES QUE DESEA CONVERTIR");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, -1, -1));

        regresar1.setBackground(new java.awt.Color(255, 255, 255));
        regresar1.setFont(new java.awt.Font("Cambria Math", 1, 14)); // NOI18N
        regresar1.setText("MENU ");
        regresar1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black));
        regresar1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        regresar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regresar1ActionPerformed(evt);
            }
        });
        jPanel1.add(regresar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 0, 100, 45));

        factoresBTN2.setFont(new java.awt.Font("Cambria Math", 2, 14)); // NOI18N
        factoresBTN2.setText("factores de conversion");
        factoresBTN2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        factoresBTN2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                factoresBTN2ActionPerformed(evt);
            }
        });
        jPanel1.add(factoresBTN2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 180, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void iniciarBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarBTNActionPerformed
        //PARA LAS OPCIONES
        try{
        String opcion = primeraCB.getSelectedItem().toString();
        String opcion2 = segundaCB.getSelectedItem().toString();
        
        //PARA LOS CALCULOS
        double unidad = parseDouble(unidadTXT.getText());
        double resultado = 0;
        
        if(opcion == null ? opcion2 == null : opcion.equals(opcion2)){
            resultadoTXT.setText(unidadTXT.getText());
        }
        
        //PARA LOS GRAMOS
        if("GRAMOS".equals(opcion) && "KILOGRAMOS".equals(opcion2)){
            resultado = parseDouble(principal.f.GramosKilogra(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("GRAMOS".equals(opcion) && "LIBRAS".equals(opcion2)){
            resultado = parseDouble(principal.f.GramosLibra(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("GRAMOS".equals(opcion) && "ONZAS".equals(opcion2)){
            resultado = parseDouble(principal.f.GramosOnza(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("GRAMOS".equals(opcion) && "MILIGRAMOS".equals(opcion2)){
            resultado = parseDouble(principal.f.GramosMiligra(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("GRAMOS".equals(opcion) && "STONE".equals(opcion2)){
            resultado = parseDouble(principal.f.GramosStone(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("GRAMOS".equals(opcion) && "TONELADAS".equals(opcion2)){
            resultado = parseDouble(principal.f.GramosOnza(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        
        //PARA LOS KILOGRAMOS
        if("KILOGRAMOS".equals(opcion) && "GRAMOS".equals(opcion2)){
            resultado = parseDouble(principal.f.KilograGramos(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("KILOGRAMOS".equals(opcion) && "LIBRAS".equals(opcion2)){
            resultado = parseDouble(principal.f.KilograLibra(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("KILOGRAMOS".equals(opcion) && "MILIGRAMOS".equals(opcion2)){
            resultado = parseDouble(principal.f.KilograMiligramo(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("KILOGRAMOS".equals(opcion) && "ONZAS".equals(opcion2)){
            resultado = parseDouble(principal.f.KilograOnza(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("KILOGRAMOS".equals(opcion) && "STONE".equals(opcion2)){
            resultado = parseDouble(principal.f.KilograStone(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("KILOGRAMOS".equals(opcion) && "TONELADAS".equals(opcion2)){
            resultado = parseDouble(principal.f.KilograTonelada(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        
        //PARA LAS LIBRAS  
        if("LIBRAS".equals(opcion) && "GRAMOS".equals(opcion2)){
            resultado = parseDouble(principal.f.LibraGramos(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("LIBRAS".equals(opcion) && "KILOGRAMOS".equals(opcion2)){
            resultado = parseDouble(principal.f.LibraKilogra(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("LIBRAS".equals(opcion) && "MILIGRAMOS".equals(opcion2)){
            resultado = parseDouble(principal.f.LibraMiligra(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("LIBRAS".equals(opcion) && "ONZAS".equals(opcion2)){
            resultado = parseDouble(principal.f.LibraOnza(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("LIBRAS".equals(opcion) && "STONE".equals(opcion2)){ 
            resultado = parseDouble(principal.f.LibraStone(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("LIBRAS".equals(opcion) && "TONELADAS".equals(opcion2)){
            resultado = parseDouble(principal.f.LibraTonelada(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        
        //PARA LOS MILIGRAMOS
        if("MILIGRAMOS".equals(opcion) && "GRAMOS".equals(opcion2)){
            resultado = parseDouble(principal.f.MiligraGramo(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILIGRAMOS".equals(opcion) && "KILOGRAMOS".equals(opcion2)){
            resultado = parseDouble(principal.f.MiligraKilogra(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILIGRAMOS".equals(opcion) && "LIBRAS".equals(opcion2)){
            resultado = parseDouble(principal.f.MiligraLibra(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILIGRAMOS".equals(opcion) && "ONZAS".equals(opcion2)){
            resultado = parseDouble(principal.f.MiligraOnza(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILIGRAMOS".equals(opcion) && "STONE".equals(opcion2)){
            resultado = parseDouble(principal.f.MiligraStone(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("MILIGRAMOS".equals(opcion) && "TONELADAS".equals(opcion2)){
            resultado = parseDouble(principal.f.MiligraTonelada(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        
        //PARA LAS ONZAS
        if("ONZAS".equals(opcion) && "GRAMOS".equals(opcion2)){
            resultado = parseDouble(principal.f.OnzaGramo(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("ONZAS".equals(opcion) && "KILOGRAMOS".equals(opcion2)){
            resultado = parseDouble(principal.f.OnzaKilogra(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("ONZAS".equals(opcion) && "LIBRAS".equals(opcion2)){
            resultado = parseDouble(principal.f.OnzaLibra(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("ONZAS".equals(opcion) && "MILIGRAMOS".equals(opcion2)){
            resultado = parseDouble(principal.f.OnzaMiligra(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("ONZAS".equals(opcion) && "STONE".equals(opcion2)){
            resultado = parseDouble(principal.f.OnzaStone(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("ONZAS".equals(opcion) && "TONELADAS".equals(opcion2)){
            resultado = parseDouble(principal.f.OnzaTonelada(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        
        //PARA LOS STONE
        if("STONE".equals(opcion) && "GRAMOS".equals(opcion2)){
            resultado = parseDouble(principal.f.StoneGramo(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("STONE".equals(opcion) && "KILOGRAMOS".equals(opcion2)){
            resultado = parseDouble(principal.f.StoneKilogra(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("STONE".equals(opcion) && "LIBRAS".equals(opcion2)){
            resultado = parseDouble(principal.f.StoneLibra(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("STONE".equals(opcion) && "MILIGRAMOS".equals(opcion2)){
            resultado = parseDouble(principal.f.StoneMiligra(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("STONE".equals(opcion) && "ONZAS".equals(opcion2)){
            resultado = parseDouble(principal.f.StoneOnza(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("STONE".equals(opcion) && "TONELADAS".equals(opcion2)){
            resultado = parseDouble(principal.f.StoneTonelada(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        
        //PARA LAS TONELADAS
        if("TONELADA".equals(opcion) && "GRAMOS".equals(opcion2)){
            resultado = parseDouble(principal.f.ToneladaGramo(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("TONELADA".equals(opcion) && "KILOGRAMOS".equals(opcion2)){
            resultado = parseDouble(principal.f.ToneladaKilogra(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("TONELADA".equals(opcion) && "LIBRAS".equals(opcion2)){
            resultado = parseDouble(principal.f.ToneladaLibra(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("TONELADA".equals(opcion) && "MILIGRAMOS".equals(opcion2)){
            resultado = parseDouble(principal.f.ToneladaMiligra(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("TONELADA".equals(opcion) && "ONZAS".equals(opcion2)){
            resultado = parseDouble(principal.f.StoneOnza(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        if("TONELDA".equals(opcion) && "STONE".equals(opcion2)){
            resultado = parseDouble(principal.f.ToneladaStone(unidad));
            resultadoTXT.setText(String.valueOf(resultado).replaceAll("E", "*10^"));
        }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null," NO INGRESE LETRAS \n NO DEJE CAMPOS VACIOS","ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_iniciarBTNActionPerformed

    private void regresar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regresar1ActionPerformed

        this.dispose();
    }//GEN-LAST:event_regresar1ActionPerformed

    private void factoresBTN2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_factoresBTN2ActionPerformed
        JOptionPane.showMessageDialog(null, "1 mg = 0.0001 g \n 1 kg = 1000 g \n 1 kg = 2.20462 lb"
                + "\n 1 lb = 16 onzas \n 1 stone = 6.39029 kg \n 1 tonelada = 1000 kg", "FACTORES", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_factoresBTN2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(masa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(masa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(masa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(masa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new masa().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton factoresBTN2;
    private javax.swing.JButton iniciarBTN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox<String> primeraCB;
    private javax.swing.JButton regresar1;
    private javax.swing.JTextField resultadoTXT;
    private javax.swing.JComboBox<String> segundaCB;
    private javax.swing.JTextField unidadTXT;
    // End of variables declaration//GEN-END:variables
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sistema.aplicativo;

import static java.lang.Double.parseDouble;

/**
 *
 * @author Roberto
 */
public class area extends javax.swing.JFrame {
    
    factory f = new factory();
    
    public area() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        unidadTXT = new javax.swing.JTextField();
        resultadoTXT = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        iniciarBTN = new javax.swing.JButton();
        segundaCB = new javax.swing.JComboBox<>();
        primeraCB = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        regresar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        unidadTXT.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        unidadTXT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                unidadTXTKeyTyped(evt);
            }
        });
        jPanel1.add(unidadTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(41, 105, 208, 40));

        resultadoTXT.setEditable(false);
        resultadoTXT.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jPanel1.add(resultadoTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(296, 105, 222, 40));

        jLabel2.setFont(new java.awt.Font("Cambria Math", 0, 36)); // NOI18N
        jLabel2.setText("=");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(259, 110, -1, -1));

        iniciarBTN.setBackground(new java.awt.Color(255, 255, 255));
        iniciarBTN.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        iniciarBTN.setText("CONVERTIR");
        iniciarBTN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        iniciarBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        iniciarBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarBTNActionPerformed(evt);
            }
        });
        jPanel1.add(iniciarBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 230, 150, 69));

        segundaCB.setFont(new java.awt.Font("Cambria Math", 1, 14)); // NOI18N
        segundaCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CENTIMETROS CUADRADOS", "METROS CUADRADOS", "KILOMETROS CUADRADOS", "MILLAS CUADRADAS", "HECTAREAS", "PIES CUADRADOS", "PULGADAS CUADRADAS", "YARDAS CUADRADAS" }));
        segundaCB.setToolTipText("");
        jPanel1.add(segundaCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(296, 160, -1, 57));

        primeraCB.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        primeraCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CENTIMETROS CUADRADOS", "METROS CUADRADOS", "KILOMETROS CUADRADOS", "MILLAS CUADRADAS", "HECTAREAS", "PIES CUADRADOS", "PULGADAS CUADRADAS", "YARDAS CUADRADAS" }));
        jPanel1.add(primeraCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(41, 160, 208, 48));

        jLabel1.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        jLabel1.setText("SELECIONE LAS UNIDADES QUE DESEA CONVERTIR");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(56, 65, -1, -1));

        regresar.setBackground(new java.awt.Color(255, 255, 255));
        regresar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        regresar.setText("MENU");
        regresar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        regresar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regresarActionPerformed(evt);
            }
        });
        jPanel1.add(regresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(458, 0, 101, 47));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void iniciarBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarBTNActionPerformed
        //PARA LAS OPCIONES
        String opcion = primeraCB.getSelectedItem().toString();
        String opcion2 = segundaCB.getSelectedItem().toString();
        
        //PARA LOS CALCULOS
        double unidad = parseDouble(unidadTXT.getText());
        double resultado = 0;
        
        if(opcion == null ? opcion2 == null : opcion.equals(opcion2)){
            resultadoTXT.setText(unidadTXT.getText());
        }
        
        //PARA CENTIMETROS
        if("CENTIMETROS CUADRADOS".equals(opcion) && "METROS CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.centiMetro(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("CENTIMETROS CUADRADOS".equals(opcion) && "KILOMETROS CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.centiKilo(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("CENTIMETROS CUADRADOS".equals(opcion) && "HECTAREAS".equals(opcion2)){
            resultado = parseDouble(f.centiHecta(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("CENTIMETROS CUADRADOS".equals(opcion) && "MILLAS CUADRADAS".equals(opcion2)){
            resultado = parseDouble(f.centiMilla(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("CENTIMETROS CUADRADOS".equals(opcion) && "PIES CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.centiPie(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("CENTIMETROS CUADRADOS".equals(opcion) && "PULGADAS CUADRADAS".equals(opcion2)){
            resultado = parseDouble(f.centiPul(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("CENTIMETROS CUADRADOS".equals(opcion) && "YARDAS CUADRADAS".equals(opcion2)){
            resultado = parseDouble(f.centiYar(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        
        //PARA METROS
        if("METROS CUADRADOS".equals(opcion) && "CENTIMETROS CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.metroCen(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("METROS CUADRADOS".equals(opcion) && "KILOMETROS CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.metroKilo(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("METROS CUADRADOS".equals(opcion) && "MILLAS CUADRADAS".equals(opcion2)){
            resultado = parseDouble(f.metroMilla(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("METROS CUADRADOS".equals(opcion) && "HECTAREAS".equals(opcion2)){
            resultado = parseDouble(f.metroHecta(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("METROS CUADRADOS".equals(opcion) && "PIES CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.metroPie(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("METROS CUADRADOS".equals(opcion) && "PULGADAS CUADRADAS".equals(opcion2)){
            resultado = parseDouble(f.metroPul(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("METROS CUADRADOS".equals(opcion) && "YARDAS CUADRADAS".equals(opcion2)){
            resultado = parseDouble(f.metroYar(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        
        //PARA LOS KILOMETROS
        if("KILOMETROS CUADRADOS".equals(opcion) && "CENTIMETROS CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.kiloCenti(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("KILOMETROS CUADRADOS".equals(opcion) && "METROS CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.kiloMetro(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("KILOMETROS CUADRADOS".equals(opcion) && "MILLAS CUADRADAS".equals(opcion2)){
            resultado = parseDouble(f.kiloMilla(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("KILOMETROS CUADRADOS".equals(opcion) && "HECTAREAS".equals(opcion2)){
            resultado = parseDouble(f.kiloHecta(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("KILOMETROS CUADRADOS".equals(opcion) && "PIES CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.kiloPie(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("KILOMETROS CUADRADOS".equals(opcion) && "PULGADAS CUADRADAS".equals(opcion2)){
            resultado = parseDouble(f.kiloPul(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("KILOMETROS CUADRADOS".equals(opcion) && "YARDAS CUADRADAS".equals(opcion2)){
            resultado = parseDouble(f.kiloYar(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        
        //PARA LAS MILLAS
        if("MILLAS CUADRADAS".equals(opcion) && "CENTIMETROS CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.millaCen(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("MILLAS CUADRADAS".equals(opcion) && "METROS CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.millaMet(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("MILLAS CUADRADAS".equals(opcion) && "KILOMETROS CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.millaKilo(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("MILLAS CUADRADAS".equals(opcion) && "HECTAREAS".equals(opcion2)){
            resultado = parseDouble(f.millaHecta(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("MILLAS CUADRADAS".equals(opcion) && "PIES CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.millaPie(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("MILLAS CUADRADAS".equals(opcion) && "PULGADAS CUADRADAS".equals(opcion2)){
            resultado = parseDouble(f.millaPul(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("MILLAS CUADRADAS".equals(opcion) && "YARDAS CUADRADAS".equals(opcion2)){
            resultado = parseDouble(f.millaYar(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        
        //PARA LAS HECTAREAS
        if("HECTAREAS".equals(opcion) && "CENTIMETROS CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.hectaCen(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("HECTAREAS".equals(opcion) && "METROS CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.hectaMet(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("HECTAREAS".equals(opcion) && "KILOMETROS CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.hectaKilo(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("HECTAREAS".equals(opcion) && "MILLAS CUADRADAS".equals(opcion2)){
            resultado = parseDouble(f.hectaMilla(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("HECTAREAS".equals(opcion) && "PIES CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.hectaPie(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("HECTAREAS".equals(opcion) && "PULGADAS CUADRADAS".equals(opcion2)){
            resultado = parseDouble(f.hectaPul(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("HECTAREAS".equals(opcion) && "YARDAS CUADRADAS".equals(opcion2)){
            resultado = parseDouble(f.hectaYar(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        
        //PARA LOS PIES 
        if("PIES CUADRADOS".equals(opcion) && "CENTIMETROS CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.pieCen(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("PIES CUADRADOS".equals(opcion) && "METROS CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.pieMet(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("PIES CUADRADOS".equals(opcion) && "KILOMETROS CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.pieKilo(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("PIES CUADRADOS".equals(opcion) && "MILLAS CUADRADAS".equals(opcion2)){
            resultado = parseDouble(f.pieMilla(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("PIES CUADRADOS".equals(opcion) && "HECTAREAS".equals(opcion2)){
            resultado = parseDouble(f.pieHecta(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("PIES CUADRADOS".equals(opcion) && "PULGADAS CUADRADAS".equals(opcion2)){
            resultado = parseDouble(f.piePul(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("PIES CUADRADOS".equals(opcion) && "YARDAS CUADRADAS".equals(opcion2)){
            resultado = parseDouble(f.piePul(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        
        //PARA LAS PULGADAS
        if("PULGADAS CUADRADAS".equals(opcion) && "CENTIMETROS CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.pulCen(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("PULGADAS CUADRADAS".equals(opcion) && "METROS CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.pulMet(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("PULGADAS CUADRADAS".equals(opcion) && "KILOMETROS CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.pulKilo(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("PULGADAS CUADRADAS".equals(opcion) && "MILLAS CUADRADAS".equals(opcion2)){
            resultado = parseDouble(f.pulMilla(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("PULGADAS CUADRADAS".equals(opcion) && "HECTAREAS".equals(opcion2)){
            resultado = parseDouble(f.pulHecta(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("PULGADAS CUADRADAS".equals(opcion) && "PIES CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.pulPie(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("PULGADAS CUADRADAS".equals(opcion) && "YARDAS CUADRADAS".equals(opcion2)){
            resultado = parseDouble(f.pulYar(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        
        //PARA LAS YARDAS
        if("YARDAS CUADRADAS".equals(opcion) && "CENTIMETROS CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.yarCen(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("YARDAS CUADRADAS".equals(opcion) && "METROS CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.yarMet(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("YARDAS CUADRADAS".equals(opcion) && "KILOMETROS CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.yarKilo(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("YARDAS CUADRADAS".equals(opcion) && "MILLAS CUADRADAS".equals(opcion2)){
            resultado = parseDouble(f.yarMilla(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("YARDAS CUADRADAS".equals(opcion) && "HECTAREAS".equals(opcion2)){
            resultado = parseDouble(f.yarHecta(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("YARDAS CUADRADAS".equals(opcion) && "PIES CUADRADOS".equals(opcion2)){
            resultado = parseDouble(f.yarPie(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        if("YARDAS CUADRADAS".equals(opcion) && "PULGADAS CUADRADAS".equals(opcion2)){
            resultado = parseDouble(f.yarPul(unidad));
            resultadoTXT.setText(String.valueOf(resultado));
        }
        
    }//GEN-LAST:event_iniciarBTNActionPerformed

    private void regresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regresarActionPerformed
        this.dispose();
    }//GEN-LAST:event_regresarActionPerformed

    private void unidadTXTKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_unidadTXTKeyTyped
        
    }//GEN-LAST:event_unidadTXTKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(area.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(area.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(area.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(area.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new area().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton iniciarBTN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox<String> primeraCB;
    private javax.swing.JButton regresar;
    private javax.swing.JTextField resultadoTXT;
    private javax.swing.JComboBox<String> segundaCB;
    private javax.swing.JTextField unidadTXT;
    // End of variables declaration//GEN-END:variables
}
